// src/App.tsx
// Aplicaci√≥n principal de POSWEBCrumen

import { useState, useEffect } from 'react'; // Importa hooks de React
import type { ScreenType } from './types'; // Importa tipos
import { useAuth } from './hooks/useAuth'; // Importa hook de autenticaci√≥n

// Importa componentes
import PresentationScreen from './components/PresentationScreen'; // Pantalla de presentaci√≥n
import LoginScreen from './components/LoginScreen'; // Pantalla de login
import HomeScreen from './components/HomeScreen'; // Pantalla principal
import ConfigUsuarios from './components/ConfigUsuarios'; // Configuraci√≥n de usuarios
import ConfigNegocios from './components/ConfigNegocios'; // Configuraci√≥n de negocios

// Importa estilos
import './styles/global.css'; // Estilos globales
import './App.css'; // Estilos espec√≠ficos de App

// Componente principal de la aplicaci√≥n
function App() {
  // Estado para la pantalla actual
  const [currentScreen, setCurrentScreen] = useState<ScreenType>('presentation');
  
  // Hook de autenticaci√≥n
  const { user, isAuthenticated, isLoading, login, logout } = useAuth();

  // Efecto para manejar cambios en el estado de autenticaci√≥n
  useEffect(() => {
    console.log('üîÑ Estado de autenticaci√≥n cambi√≥:', { isAuthenticated, user: user?.usuario }); // Log de cambio
    
    // Si est√° autenticado y no est√° en una pantalla v√°lida, va al home
    if (isAuthenticated && currentScreen !== 'home' && currentScreen !== 'config-usuarios' && currentScreen !== 'config-negocios') {
      setCurrentScreen('home');
    }
    
    // Si no est√° autenticado y no est√° en login o presentaci√≥n, va a login
    if (!isAuthenticated && !isLoading && currentScreen !== 'login' && currentScreen !== 'presentation') {
      setCurrentScreen('login');
    }
  }, [isAuthenticated, isLoading, currentScreen, user]);

  // Funci√≥n para manejar el completado de la presentaci√≥n
  const handlePresentationComplete = (): void => {
    console.log('üé¨ Presentaci√≥n completada'); // Log de completado
    setCurrentScreen('login'); // Cambia a la pantalla de login
  };

  // Funci√≥n para manejar la navegaci√≥n entre pantallas
  const handleNavigate = (screen: ScreenType): void => {
    console.log('üß≠ Navegando a pantalla:', screen); // Log de navegaci√≥n
    setCurrentScreen(screen); // Cambia la pantalla actual
  };

  // Funci√≥n para regresar al home desde pantallas de configuraci√≥n
  const handleBackToHome = (): void => {
    console.log('üè† Regresando al home'); // Log de regreso
    setCurrentScreen('home'); // Cambia al home
  };

  // Funci√≥n para manejar logout
  const handleLogout = (): void => {
    console.log('üö™ Cerrando sesi√≥n desde App'); // Log de logout
    logout(); // Ejecuta logout
    setCurrentScreen('login'); // Cambia a login
  };

  // Renderiza la pantalla actual seg√∫n el estado
  const renderCurrentScreen = (): React.ReactElement => {
    // Si est√° cargando la autenticaci√≥n, muestra un loader
    if (isLoading) {
      return (
        <div className="loading-screen fullscreen center-content">
          <div className="loading-content">
            <div className="spinner"></div>
            <p>Cargando POSWEBCrumen...</p>
          </div>
        </div>
      );
    }

    // Switch para renderizar la pantalla correspondiente
    switch (currentScreen) {
      case 'presentation':
        console.log('üé¨ Renderizando pantalla de presentaci√≥n'); // Log de renderizado
        return <PresentationScreen onComplete={handlePresentationComplete} />;

      case 'login':
        console.log('üîê Renderizando pantalla de login'); // Log de renderizado
        return <LoginScreen onLogin={login} isLoading={isLoading} />;

      case 'home':
        if (!isAuthenticated || !user) {
          console.log('‚ùå Usuario no autenticado, redirigiendo a login'); // Log de error
          setCurrentScreen('login');
          return <div></div>; // Componente vac√≠o temporal
        }
        console.log('üè† Renderizando pantalla principal'); // Log de renderizado
        return (
          <HomeScreen 
            user={user} 
            onNavigate={handleNavigate} 
            onLogout={handleLogout} 
          />
        );

      case 'config-usuarios':
        if (!isAuthenticated || !user) {
          console.log('‚ùå Usuario no autenticado, redirigiendo a login'); // Log de error
          setCurrentScreen('login');
          return <div></div>; // Componente vac√≠o temporal
        }
        console.log('üë• Renderizando configuraci√≥n de usuarios'); // Log de renderizado
        return <ConfigUsuarios onBack={handleBackToHome} />;

      case 'config-negocios':
        if (!isAuthenticated || !user) {
          console.log('‚ùå Usuario no autenticado, redirigiendo a login'); // Log de error
          setCurrentScreen('login');
          return <div></div>; // Componente vac√≠o temporal
        }
        console.log('üè¢ Renderizando configuraci√≥n de negocios'); // Log de renderizado
        return <ConfigNegocios onBack={handleBackToHome} />;

      default:
        console.log('‚ùì Pantalla desconocida, redirigiendo a presentaci√≥n'); // Log de error
        setCurrentScreen('presentation');
        return <div></div>; // Componente vac√≠o temporal
    }
  };

  return (
    <div className="app-container">
      {renderCurrentScreen()}
    </div>
  );
}

export default App;
