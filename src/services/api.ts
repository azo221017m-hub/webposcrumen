// src/services/api.ts
// Servicio para comunicaci√≥n con la API del backend POSWEBCrumen

import type { ApiResponse, LoginData, Usuario, Negocio, CreateUsuarioData, CreateNegocioData } from '../types';

// URL base de la API - se obtiene de variables de entorno o usa localhost por defecto
const API_BASE_URL = import.meta.env.VITE_API_URL || 'http://localhost:4000';

// Clase para manejar todas las llamadas a la API
class ApiService {
  private baseURL: string; // URL base de la API

  constructor() {
    this.baseURL = API_BASE_URL; // Inicializa la URL base
    console.log('üåê ApiService inicializado con URL:', this.baseURL); // Log de inicializaci√≥n
  }

  // M√©todo privado para realizar peticiones HTTP
  private async request<T>(
    endpoint: string, // Endpoint de la API
    options: RequestInit = {} // Opciones de la petici√≥n
  ): Promise<ApiResponse<T>> {
    try {
      console.log(`üì° Realizando petici√≥n: ${options.method || 'GET'} ${endpoint}`); // Log de petici√≥n
      
      // Construye la URL completa
      const url = `${this.baseURL}${endpoint}`;
      console.log(`üåê URL completa: ${url}`); // Log de URL
      
      // Configuraci√≥n por defecto de la petici√≥n
      const config: RequestInit = {
        headers: {
          'Content-Type': 'application/json', // Tipo de contenido JSON
          ...options.headers, // Headers adicionales
        },
        ...options, // Opciones adicionales
      };

      console.log(`‚öôÔ∏è Configuraci√≥n de la petici√≥n:`, config); // Log de configuraci√≥n

      // Realiza la petici√≥n
      const response = await fetch(url, config);
      console.log(`üìä Status de respuesta: ${response.status}`); // Log de status
      
      // Parsea la respuesta JSON
      const data: ApiResponse<T> = await response.json();
      console.log(`üì¶ Datos de respuesta completos:`, data); // Log de datos completos
      
      // Log del resultado
      if (data.success) {
        console.log('‚úÖ Petici√≥n exitosa:', data.message); // Log de √©xito
      } else {
        console.log('‚ùå Error en petici√≥n:', data.message); // Log de error
      }
      
      return data; // Retorna los datos
      
    } catch (error) {
      console.error('üí• Error en petici√≥n API:', error); // Log de error de red
      
      // Retorna error estructurado
      return {
        success: false,
        message: 'Error de conexi√≥n con el servidor',
        error: 'NETWORK_ERROR'
      };
    }
  }

  // M√©todo para login de usuarios
  async login(loginData: LoginData): Promise<ApiResponse<{ user: Usuario }>> {
    console.log('üîê Iniciando login para usuario:', loginData.usuario); // Log de login
    
    return this.request<{ user: Usuario }>('/api/auth/login', {
      method: 'POST', // M√©todo POST
      body: JSON.stringify(loginData), // Datos de login en JSON
    });
  }

  // M√©todo para obtener todos los usuarios
  async getUsuarios(): Promise<ApiResponse<Usuario[]>> {
    console.log('üë• Obteniendo lista de usuarios'); // Log de consulta
    
    return this.request<Usuario[]>('/api/usuarios', {
      method: 'GET', // M√©todo GET
    });
  }

  // M√©todo para crear un nuevo usuario
  async createUsuario(userData: CreateUsuarioData): Promise<ApiResponse<{ idUsuario: number; usuario: string }>> {
    console.log('üë§ Creando nuevo usuario:', userData.usuario); // Log de creaci√≥n
    
    return this.request<{ idUsuario: number; usuario: string }>('/api/usuarios', {
      method: 'POST', // M√©todo POST
      body: JSON.stringify(userData), // Datos del usuario en JSON
    });
  }

  // M√©todo para actualizar un usuario existente
  async updateUsuario(id: number, userData: Partial<CreateUsuarioData>): Promise<ApiResponse<{ idUsuario: number }>> {
    console.log('‚úèÔ∏è Actualizando usuario ID:', id); // Log de actualizaci√≥n
    
    return this.request<{ idUsuario: number }>(`/api/usuarios/${id}`, {
      method: 'PUT', // M√©todo PUT
      body: JSON.stringify(userData), // Datos actualizados en JSON
    });
  }

  // M√©todo para obtener todos los negocios
  async getNegocios(): Promise<ApiResponse<Negocio[]>> {
    console.log('üè¢ Obteniendo lista de negocios'); // Log de consulta
    
    return this.request<Negocio[]>('/api/negocios', {
      method: 'GET', // M√©todo GET
    });
  }

  // M√©todo para crear un nuevo negocio
  async createNegocio(negocioData: CreateNegocioData): Promise<ApiResponse<{ idNegocio: number; nombreNegocio: string }>> {
    console.log('üè¢ Creando nuevo negocio:', negocioData.nombreNegocio); // Log de creaci√≥n
    
    return this.request<{ idNegocio: number; nombreNegocio: string }>('/api/negocios', {
      method: 'POST', // M√©todo POST
      body: JSON.stringify(negocioData), // Datos del negocio en JSON
    });
  }

  // M√©todo para actualizar un negocio existente
  async updateNegocio(id: number, negocioData: Partial<CreateNegocioData>): Promise<ApiResponse<{ idNegocio: number }>> {
    console.log('‚úèÔ∏è Actualizando negocio ID:', id); // Log de actualizaci√≥n
    
    return this.request<{ idNegocio: number }>(`/api/negocios/${id}`, {
      method: 'PUT', // M√©todo PUT
      body: JSON.stringify(negocioData), // Datos actualizados en JSON
    });
  }

  // M√©todo para verificar la salud del servidor
  async healthCheck(): Promise<ApiResponse<any>> {
    console.log('üíä Verificando salud del servidor'); // Log de health check
    
    return this.request<any>('/health', {
      method: 'GET', // M√©todo GET
    });
  }
}

// Crea y exporta una instancia √∫nica del servicio API
const apiService = new ApiService();

export default apiService;